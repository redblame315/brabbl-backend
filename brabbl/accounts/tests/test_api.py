import re

from rest_framework import status
from rest_framework.authtoken.models import Token
from rest_framework.test import APITestCase

from django.conf import settings
from django.core import mail
from django.urls import reverse
from django.template.defaultfilters import urlencode
from django.utils.translation import ugettext_lazy as _

from brabbl.accounts.models import User, Customer
from brabbl.accounts.tests.factories import CustomerFactory, StaffFactory, UserFactory, GroupFactory
from brabbl.accounts.tests.factories import PrivateCustomerFactory
from brabbl.utils import test
from brabbl.utils.test import BrabblClient


class AccountAPITest(test.CreateTestMixin,
                     test.RetrieveTestMixin,
                     test.UpdateTestMixin,
                     test.BrabblAPITestCase):
    base_name = 'user'

    create_user_required = False
    create_required_fields = ['password', 'email']

    retrieve_user_required = True

    def get_create_url(self):
        return reverse('v1:{0}-create'.format(self.base_name))

    def get_create_data(self):
        return {
            'username': 'hans.lustig',
            'first_name': 'Hans',
            'last_name': 'Lustig',
            'email': 'hans.lustig@example.com',
            'password': 'hans4',
        }

    def get_update_url(self, obj=None):
        return '/api/v1/account/'

    def get_update_data(self):
        return {
            'username': 'hans.lustig2',
            'email': 'hans.lustig@example.com2',
            'newsmail_schedule': 0,
            'image': ''  # NOQA
        }

    def test_update(self):
        data = self.get_update_data()
        response = self.update(data)
        for field, value in data.items():
            if field == 'image':
                self.assertTrue(isinstance(response.data[field], dict))
                self.assertTrue('small' in response.data[field])
                self.assertTrue('original' in response.data[field])
            else:
                self.assertEqual(response.data[field], value)
        return response

    def get_retrieve_url(self, obj=None):
        return reverse('v1:{0}-profile'.format(self.base_name))

    def test_create(self):
        super().test_create()

        create_data = self.get_create_data()
        customer = Customer.objects.first()
        user = User.objects.get(
            username='{}+{}'.format(
                create_data['username'], customer.embed_token
            )
        )
        self.assertTrue(user.is_active)

        # is the password set correctly?
        self.assertTrue(user.check_password(create_data['password']))

        # a registration mail should be triggered
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(self.customer.moderator_email, mail.outbox[0].from_email)
        self.assertTrue(create_data['email'] in mail.outbox[0].recipients())

        # Notification for not active user
        # # mail should contain verification url
        # url = reverse('verify-registration', args=(user.unique_token,))
        # url = '/'.join(url.split('/')[:-2])  # remove token
        # self.assertTrue(url in mail.outbox[0].body,
        #                 '"{0}" not in "{1}"'.format(url, mail.outbox[0].body))
        #
        # full_url = 'http://{0}{1}'.format(settings.SITE_DOMAIN, url)
        # self.assertTrue(full_url in mail.outbox[0].body,
        #                 '"{0}" not in "{1}"'.format(full_url, mail.outbox[0].body))
        #
        # # verify token
        # match = re.findall(r'.*{0}/([^/]+).*'.format(url), mail.outbox[0].body)
        # self.assertTrue(match)
        # User.objects.get_by_token(match[0])

    def test_create_with_correct_invite_token_create_confirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, True)

    def test_create_with_correct_invite_token_no_verification_email_sent(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        self.assertEqual(len(mail.outbox), 0)

    def test_create_with_incorrect_invite_token_send_verfication_email_and_create_unconfirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for('wrong@mail.com')
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, False)
        self.assertEqual(len(mail.outbox), 1)

    def test_create_remove_email_from_pending_invitations(self):
        data = self.get_create_data()
        customer = Customer.objects.first()

        response = self.create(data=data, status_code=status.HTTP_201_CREATED)

        # test if invitations_pending is changed
        invitations_pending = self.customer.invitations_pending
        customer = Customer.objects.get(pk=self.customer.pk)
        self.assertNotEqual(customer.invitations_pending, invitations_pending)

    def test_create_when_display_option_username(self):
        customer = Customer.objects.first()
        customer.displayed_username = Customer.DISPLAY_USERNAME
        customer.save()
        data = {
            'username': 'hans.lustig',
            'email': 'hans.lustig@example.com',
            'password': 'hans4',
        }
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        data = {
            'email': 'hans.lustig2@example.com',
            'password': 'hans4',
        }
        data = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertTrue('username' in response.data)

    def test_create_when_display_option_fullname_confirm_username_generate(self):
        customer = Customer.objects.first()
        customer.displayed_username = Customer.DISPLAY_NAME_LAST_NAME
        customer.save()
        data = {
            'first_name': 'Hans',
            'last_name': 'Lustig',
            'email': 'hans.lustig@example.com',
            'password': 'hans4',
        }
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertTrue(user.username)
        data = {
            'email': 'hans.lustig.new@example.com',
            'password': 'hans4',
        }
        data = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)

    def test_create_with_correct_invite_token_create_confirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        customer.invitations = [data['email']]
        customer.save()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, True)

    def test_create_with_correct_invite_token_no_verification_email_sent(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        customer.invitations = [data['email']]
        customer.save()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        self.assertEqual(len(mail.outbox), 0)

    def test_create_with_incorrect_invite_token_send_verfication_email_and_create_unconfirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        customer.invitations = [data['email']]
        customer.save()
        data['token'] = customer.get_invite_token_for('wrong@mail.com')
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, False)
        self.assertEqual(len(mail.outbox), 1)

    def test_create_uniqueness_username(self):
        data = self.get_create_data()
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        data['email'] = 'test@test.de'
        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertEqual(len(response.data.keys()), 1)
        self.assertTrue('username' in response.data)

    def test_create_uniqueness_email(self):
        data = self.get_create_data()
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        data['username'] = 'some.username'
        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertEqual(len(response.data.keys()), 1)
        self.assertTrue('email' in response.data)

    def test_referer(self):
        next_url = 'http://' + self.customer.allowed_domains.splitlines()[0] + '/article-5/'
        self.client.set_referer(next_url)
        self.create()

        next_part = '?next={0}'.format(urlencode(next_url))
        self.assertTrue(next_part in mail.outbox[0].body)

    def test_create_result_data_policy_checked(self):
        self.create()
        create_data = self.get_create_data()
        customer = Customer.objects.first()
        user = User.objects.get(
            username='{}+{}'.format(
                create_data['username'], customer.embed_token
            )
        )
        self.assertTrue(user.has_accepted_current_data_policy())


class LoginAPITest(test.CreateTestMixin,
                   test.BrabblAPITestCase):
    base_name = 'user'

    create_status_code = status.HTTP_200_OK
    create_user_required = False
    create_required_fields = ['username', 'password']

    def get_create_url(self):
        return reverse('v1:{0}-login'.format(self.base_name))

    def get_create_data(self):
        return {
            'username': self.user.username,
            'password': self.user_password,
        }

    # test_login
    def test_create(self):
        self.assertEqual(Token.objects.filter(user=self.user).count(), 0)
        response = super().test_create()
        self.assertTrue('token' in response.data)

        token = Token.objects.get(user=self.user)
        self.assertEqual(response.data['token'], token.key)

    def test_login_not_allowed(self):
        self.user.is_active = False
        self.user.save()

        response = self.create(status_code=status.HTTP_400_BAD_REQUEST)
        self.assertTrue('non_field_errors' in response.data)

    def test_login_with_casedifferent_upper_username_result_allowed(self):
        data = {
            'username': self.user.email.upper(),
            'password': self.user_password,
        }
        response = self.create(data=data, status_code=status.HTTP_200_OK)

    def test_login_with_casedifferent_lower_username_result_allowed(self):
        data = {
            'username': self.user.email,
            'password': self.user_password,
        }
        self.user.email = self.user.email.upper()
        self.user.save()

        response = self.create(data=data, status_code=status.HTTP_200_OK)


class PrivateLoginAPITest(test.CreateTestMixin,
                          test.PrivateBrabblAPITestCase):
    base_name = 'user'

    create_status_code = status.HTTP_200_OK
    create_user_required = False
    create_required_fields = ['username', 'password']

    def get_create_url(self):
        return reverse('v1:{0}-login'.format(self.base_name))

    def get_create_data(self):
        return {
            'username': self.user.username,
            'password': self.user_password,
        }

    # test_login
    def test_create(self):
        self.assertEqual(Token.objects.filter(user=self.user).count(), 0)
        response = super().test_create()
        self.assertTrue('token' in response.data)

        token = Token.objects.get(user=self.user)
        self.assertEqual(response.data['token'], token.key)

    def test_login_with_in_active_user_result_not_allowed(self):
        self.user.is_active = False
        self.user.save()

        response = self.create(status_code=status.HTTP_400_BAD_REQUEST)
        self.assertTrue('non_field_errors' in response.data)

    def test_login_with_not_verified_user_result_not_allowed(self):
        self.user.is_confirmed = False
        self.user.save()

        response = self.create(status_code=status.HTTP_400_BAD_REQUEST)
        self.assertTrue('non_field_errors' in response.data)


class PasswordResetAPITest(test.CreateTestMixin,
                           test.BrabblAPITestCase):
    base_name = 'user'

    create_status_code = status.HTTP_204_NO_CONTENT
    create_user_required = False
    create_required_fields = ['email']

    def get_create_url(self):
        return reverse('v1:{0}-reset-password'.format(self.base_name))

    def get_create_data(self):
        return {
            'email': self.user.email,
        }

    def test_create(self):  # test password reset
        super().test_create()
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(self.customer.moderator_email, mail.outbox[0].from_email)
        self.assertTrue(self.user.email in mail.outbox[0].recipients())

        url = reverse('reset-password', args=(self.user.unique_token,))
        url = '/'.join(url.split('/')[:-2])  # remove token
        self.assertTrue(url in mail.outbox[0].body,
                        '"{0}" not in "{1}"'.format(url, mail.outbox[0].body))

        full_url = 'http://{0}{1}'.format(settings.SITE_DOMAIN, url)
        self.assertTrue(full_url in mail.outbox[0].body,
                        '"{0}" not in "{1}"'.format(full_url, mail.outbox[0].body))

        # verify token
        match = re.findall(r'.*{0}/([^/]+).*'.format(url), mail.outbox[0].body)
        self.assertTrue(match)
        User.objects.get_by_token(match[0])

    def test_invalid_email(self):
        data = {
            'email': 'invalid@invalid.com'
        }
        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertTrue('email' in response.data)

    def test_referer(self):
        next_url = 'http://' + self.customer.allowed_domains.splitlines()[0] + '/article-5/'
        self.client.set_referer(next_url)
        self.create()

        next_part = '?next={0}'.format(urlencode(next_url))
        self.assertTrue(next_part in mail.outbox[0].body)


class UserListUpdateAPITestCase(APITestCase):
    client_class = BrabblClient

    def setUp(self):
        self.customer = CustomerFactory.create()
        self.user = StaffFactory(username='admin', customer=self.customer)
        self.test_user = UserFactory(customer=self.customer)
        self.group = GroupFactory.create()
        self.user.set_password('admin')
        self.user.save()
        self.client.login(username='admin', password='admin')
        self.url = reverse('v1:user-list-update')
        self.client.as_user(self.user)
        self.client.as_customer(self.customer)

    def test_update_wrong_user(self):
        data = {
            'user_id': -1,
            'is_active': True,
            'group': self.group.pk
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        response.render()

    def test_update(self):
        data = {
            'user_id': self.test_user.pk,
            'is_active': True,
            'group': self.group.pk
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        test_user = User.objects.get(pk=self.test_user.pk)
        self.assertDictEqual(data, {
            'user_id': test_user.pk,
            'is_active': test_user.is_active,
            'group': test_user.groups.all()[0].pk
        })


class InviteParticipantAPITestCase(APITestCase):
    client_class = BrabblClient

    def setUp(self):
        self.customer = CustomerFactory.create()
        self.user = StaffFactory(username='admin', customer=self.customer)
        self.test_user = UserFactory(customer=self.customer)
        self.group = GroupFactory.create()
        self.user.set_password('admin')
        self.user.save()
        self.client.login(username='admin', password='admin')
        self.url = reverse('v1:invite-participant')
        self.client.as_user(self.user)
        self.client.as_customer(self.customer)
        self.invitations = []
        self.users = []

    def test_add_emails(self):
        data = {
            'invitations': [
                'test@mail.com',
                'test2@mail.com',
                'test3@mail.com-admin'
            ]
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = customer.invitations_pending.splitlines()

        for email in data['invitations']:
            self.assertTrue(email in invitations)
        response.render()

    def test_already_added_email(self):
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = customer.invitations_pending.splitlines()
        data = {
            'invitations': invitations
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = response.data['invitations']

        for email in data['invitations']:
            self.assertFalse(email in invitations)
        response.render()

    def test_already_signup_email_invite_email_not_exist_in_invitations(self):
        users = User.objects.all().values('email')
        emails = []
        for u in users:
            if u["email"]:
                emails.append(u["email"])
        data = {
            'invitations': emails
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        invitations = response.data['invitations']
        for email in data['invitations']:
            self.assertFalse(email in invitations)
        response.render()

    def test_already_signup_email_invite_email_exist_in_already_signup_invitations(self):
        users = User.objects.all().values('email')
        emails = []
        for u in users:
            if u["email"]:
                emails.append(u["email"])
        data = {
            'invitations': emails
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        invitations = response.data['already_signup_invitations']
        for email in data['invitations']:
            self.assertTrue(email in invitations)
        response.render()

    def test_send_email_template(self):
        data = {
            'invitations': [
                'test@mail.com',
                'test2@mail.com',
                'test3@mail.com-admin'
            ]
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = response.data['invitations']
        self.assertEqual(len(mail.outbox), len(invitations))
        response.render()

    def test_delete_emails(self):
        data = {
            'invitations': [
                'test@mail.com',
                'test2@mail.com',
                'test3@mail.com-admin'
            ]
        }
        response = self.client.post(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = customer.invitations_pending.splitlines()

        for email in data['invitations']:
            self.assertTrue(email in invitations)

        response = self.client.patch(self.url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = customer.invitations_pending.splitlines()

        for email in data['invitations']:
            self.assertFalse(email in invitations)
        response.render()


class PrivateAccountAPITest(test.CreateTestMixin,
                            test.RetrieveTestMixin,
                            test.UpdateTestMixin,
                            APITestCase):
    client_class = BrabblClient
    user_password = 'TEST_PASSWORD'

    base_name = 'user'

    create_user_required = False
    create_required_fields = ['password', 'email']

    retrieve_user_required = True
    invitations_pending = ''
    invitations = []

    def setUp(self):
        self.customer = PrivateCustomerFactory.create()
        self.user = UserFactory.create(customer=self.customer)
        self.user.set_password(self.user_password)
        self.user.save()
        self.client.login(username='admin', password='admin')
        self.client.as_user(self.user)
        self.client.as_customer(self.customer)

    def get_object(self):  # pragma: no cover
        raise NotImplemented()

    def get_create_url(self):
        return reverse('v1:{0}-create'.format(self.base_name))

    def get_create_data(self):
        return {
            'username': 'hans.lustig',
            'first_name': 'Hans',
            'last_name': 'Lustig',
            'email': 'hans.lustig@example.com',
            'password': 'hans4',
        }

    def get_update_url(self, obj=None):
        return '/api/v1/account/'

    def get_update_data(self):
        return {
            'username': 'hans.lustig2',
            'email': 'hans.lustig@example.com2',
            'newsmail_schedule': 0,
            'image': ''  # NOQA
        }

    def test_update(self):
        data = self.get_update_data()
        response = self.update(data)
        for field, value in data.items():
            if field == 'image':
                self.assertTrue(isinstance(response.data[field], dict))
                self.assertTrue('small' in response.data[field])
                self.assertTrue('original' in response.data[field])
            else:
                self.assertEqual(response.data[field], value)
        return response

    def get_retrieve_url(self, obj=None):
        return reverse('v1:{0}-profile'.format(self.base_name))

    def test_create(self):
        super().test_create()

        create_data = self.get_create_data()
        customer = Customer.objects.first()
        user = User.objects.get(
            username='{}+{}'.format(
                create_data['username'], customer.embed_token
            )
        )
        self.assertTrue(user.is_active)

        # is the password set correctly?
        self.assertTrue(user.check_password(create_data['password']))

        # a registration mail should be triggered
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(self.customer.moderator_email, mail.outbox[0].from_email)
        self.assertTrue(create_data['email'] in mail.outbox[0].recipients())

        # test if email removed from invitations_pending
        customer = Customer.objects.get(pk=self.customer.pk)
        invitations = customer.invitations_pending.splitlines()

        self.assertFalse(create_data['email'] in invitations)
        self.assertEqual(len(invitations), 2)

    def test_create_with_correct_invite_token_create_confirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, True)

    def test_create_with_correct_invite_token_no_verification_email_sent(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for(data['email'])
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        self.assertEqual(len(mail.outbox), 0)

    def test_create_with_incorrect_invite_token_send_verfication_email_and_create_unconfirmed_user(self):
        data = self.get_create_data()
        customer = Customer.objects.first()
        data['token'] = customer.get_invite_token_for('wrong@mail.com')
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        user = User.objects.get(email=data['email'])
        self.assertEqual(user.is_confirmed, False)
        self.assertEqual(len(mail.outbox), 1)

    def test_create_uniqueness_username(self):
        data = self.get_create_data()
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        data['email'] = 'new@mail.com'
        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertEqual(len(response.data.keys()), 1)
        self.assertTrue('username' in response.data)

    def test_create_uniqueness_email(self):
        data = self.get_create_data()
        response = self.create(data=data, status_code=status.HTTP_201_CREATED)
        data['username'] = 'some.username'
        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertEqual(len(response.data.keys()), 1)
        self.assertTrue('email' in response.data)

    def test_referer(self):
        next_url = 'http://' + self.customer.allowed_domains.splitlines()[0] + '/article-5/'
        self.client.set_referer(next_url)
        self.create()

        next_part = '?next={0}'.format(urlencode(next_url))
        self.assertTrue(next_part in mail.outbox[0].body)

    def test_create_result_data_policy_checked(self):
        self.create()
        create_data = self.get_create_data()
        customer = Customer.objects.first()
        user = User.objects.get(
            username='{}+{}'.format(
                create_data['username'], customer.embed_token
            )
        )
        self.assertTrue(user.has_accepted_current_data_policy())

    def test_create_without_invitation(self):
        data = self.get_create_data()
        data['username'] = 'some.username'
        data['email'] = 'withoutinvitation@mail.com'

        response = self.create(data=data, status_code=status.HTTP_400_BAD_REQUEST)
        self.assertEqual(len(response.data.keys()), 1)

        # test if invitations_pending not changed
        invitations_pending = self.customer.invitations_pending
        customer = Customer.objects.get(pk=self.customer.pk)
        self.assertEqual(customer.invitations_pending, invitations_pending)

    def test_create_remove_email_from_pending_invitations(self):
        data = self.get_create_data()
        customer = Customer.objects.first()

        response = self.create(data=data, status_code=status.HTTP_201_CREATED)

        # test if invitations_pending is changed
        invitations_pending = self.customer.invitations_pending
        customer = Customer.objects.get(pk=self.customer.pk)
        self.assertNotEqual(customer.invitations_pending, invitations_pending)


class VersionApiTest(test.RetrieveTestMixin,
                     test.BrabblAPITestCase):

    def get_retrieve_url(self, obj=None):
        return reverse('v1:version')
